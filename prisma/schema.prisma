// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles and account management
model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  password     String
  fullName     String
  email        String?   @unique
  phone        String?   @unique
  role         UserRoles
  active       Boolean   @default(true)
  refreshToken String?
  
  // Relations
  orders       Order[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("users")
}

// Categories for menu items
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  type        String
  active      Boolean   @default(true)
  
  // Relations
  menuItems   MenuItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("categories")
}

// Menu items (food and drinks)
model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  image       String?
  active      Boolean   @default(true)
  
  // Relations
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("menu_items")
}

// Tables in the cafe
model Table {
  id          Int       @id @default(autoincrement())
  number      Int       @unique
  capacity    Int
  status      TableStatus @default(AVAILABLE)
  
  // Relations
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("tables")
}

// Orders
model Order {
  id          Int       @id @default(autoincrement())
  orderNumber String    @unique
  status      OrderStatus @default(PENDING)
  totalAmount Decimal
  startTime   DateTime  @default(now())
  endTime     DateTime?
  
  // Relations
  table       Table     @relation(fields: [tableId], references: [id])
  tableId     Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  payment     Payment?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("orders")
}

// Order items (items in each order)
model OrderItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  price       Decimal
  notes       String?
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId  Int
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("order_items")
}

// Payments
model Payment {
  id          Int       @id @default(autoincrement())
  amount      Decimal
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int       @unique
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("payments")
}

// Enums
enum UserRoles {
  ADMIN
  STAFF
}


enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
